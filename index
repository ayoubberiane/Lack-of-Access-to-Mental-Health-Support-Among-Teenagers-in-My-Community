<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neural Problem Tree Analysis</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 20px;
            background: radial-gradient(circle at center, #1a1a2e 0%, #2d1b69 50%, #0f0f23 100%);
            min-height: 100vh;
            overflow-x: auto;
        }
        
        .container {
            width: 100%;
            min-height: 100vh;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            color: #ffffff;
            z-index: 100;
        }
        
        .header h1 {
            color: #e6f3ff;
            margin-bottom: 10px;
            font-size: 2.2em;
            text-shadow: 0 0 20px rgba(230, 243, 255, 0.5);
        }
        
        .header p {
            color: #a8c8ec;
            font-size: 1.1em;
        }
        
        .neural-network {
            position: relative;
            width: 100%;
            height: 800px;
            max-width: 1400px;
        }
        
        .node {
            position: absolute;
            background: radial-gradient(circle, rgba(230, 243, 255, 0.15) 0%, rgba(230, 243, 255, 0.08) 50%, transparent 100%);
            border: 2px solid;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            font-size: 0.85em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            z-index: 10;
        }
        
        .node:hover {
            transform: scale(1.1);
            box-shadow: 0 0 30px rgba(230, 243, 255, 0.4);
        }
        
        .central-node {
            width: 180px;
            height: 180px;
            border-color: #7eb3d3;
            color: #e6f3ff;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background: radial-gradient(circle, rgba(126, 179, 211, 0.25) 0%, rgba(126, 179, 211, 0.15) 50%, transparent 100%);
            box-shadow: 0 0 40px rgba(126, 179, 211, 0.3);
            font-size: 1em;
            z-index: 20;
        }
        
        .root-node {
            width: 120px;
            height: 120px;
            border-color: #d4a574;
            color: #f4e4c1;
            background: radial-gradient(circle, rgba(212, 165, 116, 0.2) 0%, rgba(212, 165, 116, 0.1) 50%, transparent 100%);
        }
        
        .root-node:hover {
            box-shadow: 0 0 25px rgba(212, 165, 116, 0.5);
        }
        
        .effect-node {
            width: 110px;
            height: 110px;
            border-color: #e85a4f;
            color: #ffcccb;
            background: radial-gradient(circle, rgba(232, 90, 79, 0.2) 0%, rgba(232, 90, 79, 0.1) 50%, transparent 100%);
        }
        
        .effect-node:hover {
            box-shadow: 0 0 25px rgba(232, 90, 79, 0.5);
        }
        
        .solution-node {
            width: 100px;
            height: 100px;
            border-color: #4f9d69;
            color: #c8e6c9;
            background: radial-gradient(circle, rgba(79, 157, 105, 0.2) 0%, rgba(79, 157, 105, 0.1) 50%, transparent 100%);
        }
        
        .solution-node:hover {
            box-shadow: 0 0 25px rgba(79, 157, 105, 0.5);
        }
        
        .connection {
            position: absolute;
            background: linear-gradient(90deg, transparent, rgba(126, 179, 211, 0.6), transparent);
            height: 2px;
            transform-origin: left center;
            pointer-events: none;
            animation: pulse 2s infinite;
        }
        
        .connection.root-connection {
            background: linear-gradient(90deg, transparent, rgba(212, 165, 116, 0.6), transparent);
        }
        
        .connection.effect-connection {
            background: linear-gradient(90deg, transparent, rgba(232, 90, 79, 0.6), transparent);
        }
        
        .connection.solution-connection {
            background: linear-gradient(90deg, transparent, rgba(79, 157, 105, 0.6), transparent);
        }
        
        @keyframes pulse {
            0% { opacity: 0.4; }
            50% { opacity: 1; }
            100% { opacity: 0.4; }
        }
        
        .legend {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(26, 26, 46, 0.8);
            border: 1px solid #7eb3d3;
            border-radius: 10px;
            padding: 15px;
            backdrop-filter: blur(10px);
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin: 5px 0;
            color: #e6f3ff;
            font-size: 0.9em;
        }
        
        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
            border: 2px solid;
        }
        
        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
        
        .particle {
            position: absolute;
            width: 3px;
            height: 3px;
            background: #7eb3d3;
            border-radius: 50%;
            opacity: 0.7;
            animation: float 4s infinite ease-in-out;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        @media (max-width: 768px) {
            .neural-network {
                height: 1000px;
            }
            
            .node {
                font-size: 0.7em;
            }
            
            .central-node {
                width: 140px;
                height: 140px;
                font-size: 0.9em;
            }
            
            .root-node {
                width: 100px;
                height: 100px;
            }
            
            .effect-node {
                width: 90px;
                height: 90px;
            }
            
            .solution-node {
                width: 80px;
                height: 80px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Lack of Access to Mental Health Support Among Teenagers in My Community</h1>
            <p><strong>Ayoub Beriane</strong> â€¢ July 9, 2025</p>
            <p>ðŸŒ³ Problem Tree Analysis</p>
        </div>
        
        <div class="neural-network">
            <div class="particles" id="particles"></div>
            
            <!-- Central Problem Node -->
            <div class="node central-node">
                <div>
                    <strong>CORE PROBLEM</strong><br>
                    Lack of Mental Health Support for Teenagers
                </div>
            </div>
            
            <!-- Root Cause Nodes -->
            <div class="node root-node" style="left: 15%; top: 70%;">
                <div>Social Stigma & Cultural Barriers</div>
            </div>
            
            <div class="node root-node" style="left: 35%; top: 85%;">
                <div>Institutional Gaps & Untrained Staff</div>
            </div>
            
            <div class="node root-node" style="left: 65%; top: 85%;">
                <div>Economic Barriers & Cost Issues</div>
            </div>
            
            <div class="node root-node" style="left: 85%; top: 70%;">
                <div>Limited Awareness & Recognition</div>
            </div>
            
            <div class="node root-node" style="left: 50%; top: 90%;">
                <div>Access & Infrastructure Problems</div>
            </div>
            
            <!-- Effect Nodes -->
            <div class="node effect-node" style="left: 10%; top: 25%;">
                <div>Academic Performance Decline</div>
            </div>
            
            <div class="node effect-node" style="left: 30%; top: 10%;">
                <div>Mental Health Crisis</div>
            </div>
            
            <div class="node effect-node" style="left: 70%; top: 10%;">
                <div>Social Isolation</div>
            </div>
            
            <div class="node effect-node" style="left: 90%; top: 25%;">
                <div>Risky Behaviors</div>
            </div>
            
            <div class="node effect-node" style="left: 50%; top: 5%;">
                <div>Long-term Community Impact</div>
            </div>
            
            <!-- Solution Nodes -->
            <div class="node solution-node" style="left: 5%; top: 50%;">
                <div>Awareness Campaigns</div>
            </div>
            
            <div class="node solution-node" style="left: 25%; top: 45%;">
                <div>Training Programs</div>
            </div>
            
            <div class="node solution-node" style="left: 75%; top: 45%;">
                <div>Support Services</div>
            </div>
            
            <div class="node solution-node" style="left: 95%; top: 50%;">
                <div>Peer Networks</div>
            </div>
            
            <div class="node solution-node" style="left: 50%; top: 35%;">
                <div>Policy Changes</div>
            </div>
            
            <div class="node solution-node" style="left: 20%; top: 60%;">
                <div>Community Partnerships</div>
            </div>
            
            <div class="node solution-node" style="left: 80%; top: 60%;">
                <div>Technology Solutions</div>
            </div>
        </div>
        
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="border-color: #7eb3d3; background: rgba(126, 179, 211, 0.2);"></div>
                <span>Central Problem</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="border-color: #d4a574; background: rgba(212, 165, 116, 0.2);"></div>
                <span>Root Causes</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="border-color: #e85a4f; background: rgba(232, 90, 79, 0.2);"></div>
                <span>Effects</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="border-color: #4f9d69; background: rgba(79, 157, 105, 0.2);"></div>
                <span>Solutions</span>
            </div>
        </div>
    </div>
    
    <script>
        // Create animated particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            for (let i = 0; i < 50; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 4 + 's';
                particle.style.animationDuration = (Math.random() * 3 + 2) + 's';
                particlesContainer.appendChild(particle);
            }
        }
        
        // Create neural connections
        function createConnections() {
            const network = document.querySelector('.neural-network');
            const central = document.querySelector('.central-node');
            const nodes = document.querySelectorAll('.node:not(.central-node)');
            
            nodes.forEach((node, index) => {
                const connection = document.createElement('div');
                connection.className = 'connection';
                
                if (node.classList.contains('root-node')) {
                    connection.classList.add('root-connection');
                } else if (node.classList.contains('effect-node')) {
                    connection.classList.add('effect-connection');
                } else if (node.classList.contains('solution-node')) {
                    connection.classList.add('solution-connection');
                }
                
                const centralRect = central.getBoundingClientRect();
                const nodeRect = node.getBoundingClientRect();
                const networkRect = network.getBoundingClientRect();
                
                const centralX = centralRect.left + centralRect.width / 2 - networkRect.left;
                const centralY = centralRect.top + centralRect.height / 2 - networkRect.top;
                const nodeX = nodeRect.left + nodeRect.width / 2 - networkRect.left;
                const nodeY = nodeRect.top + nodeRect.height / 2 - networkRect.top;
                
                const distance = Math.sqrt(Math.pow(nodeX - centralX, 2) + Math.pow(nodeY - centralY, 2));
                const angle = Math.atan2(nodeY - centralY, nodeX - centralX);
                
                connection.style.left = centralX + 'px';
                connection.style.top = centralY + 'px';
                connection.style.width = distance + 'px';
                connection.style.transform = `rotate(${angle}rad)`;
                connection.style.animationDelay = (index * 0.1) + 's';
                
                network.appendChild(connection);
            });
        }
        
        // Initialize the neural network
        document.addEventListener('DOMContentLoaded', function() {
            createParticles();
            setTimeout(createConnections, 100);
        });
        
        // Add hover effects to nodes
        document.querySelectorAll('.node').forEach(node => {
            node.addEventListener('mouseenter', function() {
                this.style.transform += ' scale(1.1)';
            });
            
            node.addEventListener('mouseleave', function() {
                this.style.transform = this.style.transform.replace(' scale(1.1)', '');
            });
        });
    </script>
</body>
</html>
